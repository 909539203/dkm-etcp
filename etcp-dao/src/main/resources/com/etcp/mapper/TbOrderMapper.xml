<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.etcp.mapper.TbOrderMapper" >
  <resultMap id="BaseResultMap" type="com.etcp.pojo.TbOrder" >
    <id column="order_id" property="orderId" jdbcType="BIGINT" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="in_time" property="inTime" jdbcType="TIMESTAMP" />
    <result column="out_time" property="outTime" jdbcType="TIMESTAMP" />
    <result column="close_time" property="closeTime" jdbcType="TIMESTAMP" />
    <result column="payment_time" property="paymentTime" jdbcType="TIMESTAMP" />
    <result column="isOvertime" property="isovertime" jdbcType="INTEGER" />
    <result column="overtime" property="overtime" jdbcType="INTEGER" />
    <result column="timeLength" property="timelength" jdbcType="VARCHAR" />
    <result column="payment" property="payment" jdbcType="DECIMAL" />
    <result column="payment_type" property="paymentType" jdbcType="INTEGER" />
    <result column="status" property="status" jdbcType="INTEGER" />
    <result column="guarantee" property="guarantee" jdbcType="DECIMAL" />
    <result column="user_id" property="userId" jdbcType="BIGINT" />
    <result column="key1" property="key1" jdbcType="VARCHAR" />
    <result column="key2" property="key2" jdbcType="VARCHAR" />
    <result column="key3" property="key3" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    order_id, create_time, in_time, out_time, close_time, payment_time, isOvertime, overtime, 
    timeLength, payment, payment_type, status, guarantee, user_id, key1, key2, key3
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.etcp.pojo.TbOrderExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from tb_order
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select 
    <include refid="Base_Column_List" />
    from tb_order
    where order_id = #{orderId,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from tb_order
    where order_id = #{orderId,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.etcp.pojo.TbOrderExample" >
    delete from tb_order
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.etcp.pojo.TbOrder" >
    insert into tb_order (order_id, create_time, in_time, 
      out_time, close_time, payment_time, 
      isOvertime, overtime, timeLength, 
      payment, payment_type, status, 
      guarantee, user_id, key1, 
      key2, key3)
    values (#{orderId,jdbcType=BIGINT}, #{createTime,jdbcType=TIMESTAMP}, #{inTime,jdbcType=TIMESTAMP}, 
      #{outTime,jdbcType=TIMESTAMP}, #{closeTime,jdbcType=TIMESTAMP}, #{paymentTime,jdbcType=TIMESTAMP}, 
      #{isovertime,jdbcType=INTEGER}, #{overtime,jdbcType=INTEGER}, #{timelength,jdbcType=VARCHAR}, 
      #{payment,jdbcType=DECIMAL}, #{paymentType,jdbcType=INTEGER}, #{status,jdbcType=INTEGER}, 
      #{guarantee,jdbcType=DECIMAL}, #{userId,jdbcType=BIGINT}, #{key1,jdbcType=VARCHAR}, 
      #{key2,jdbcType=VARCHAR}, #{key3,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.etcp.pojo.TbOrder" >
    insert into tb_order
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="orderId != null" >
        order_id,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="inTime != null" >
        in_time,
      </if>
      <if test="outTime != null" >
        out_time,
      </if>
      <if test="closeTime != null" >
        close_time,
      </if>
      <if test="paymentTime != null" >
        payment_time,
      </if>
      <if test="isovertime != null" >
        isOvertime,
      </if>
      <if test="overtime != null" >
        overtime,
      </if>
      <if test="timelength != null" >
        timeLength,
      </if>
      <if test="payment != null" >
        payment,
      </if>
      <if test="paymentType != null" >
        payment_type,
      </if>
      <if test="status != null" >
        status,
      </if>
      <if test="guarantee != null" >
        guarantee,
      </if>
      <if test="userId != null" >
        user_id,
      </if>
      <if test="key1 != null" >
        key1,
      </if>
      <if test="key2 != null" >
        key2,
      </if>
      <if test="key3 != null" >
        key3,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="orderId != null" >
        #{orderId,jdbcType=BIGINT},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="inTime != null" >
        #{inTime,jdbcType=TIMESTAMP},
      </if>
      <if test="outTime != null" >
        #{outTime,jdbcType=TIMESTAMP},
      </if>
      <if test="closeTime != null" >
        #{closeTime,jdbcType=TIMESTAMP},
      </if>
      <if test="paymentTime != null" >
        #{paymentTime,jdbcType=TIMESTAMP},
      </if>
      <if test="isovertime != null" >
        #{isovertime,jdbcType=INTEGER},
      </if>
      <if test="overtime != null" >
        #{overtime,jdbcType=INTEGER},
      </if>
      <if test="timelength != null" >
        #{timelength,jdbcType=VARCHAR},
      </if>
      <if test="payment != null" >
        #{payment,jdbcType=DECIMAL},
      </if>
      <if test="paymentType != null" >
        #{paymentType,jdbcType=INTEGER},
      </if>
      <if test="status != null" >
        #{status,jdbcType=INTEGER},
      </if>
      <if test="guarantee != null" >
        #{guarantee,jdbcType=DECIMAL},
      </if>
      <if test="userId != null" >
        #{userId,jdbcType=BIGINT},
      </if>
      <if test="key1 != null" >
        #{key1,jdbcType=VARCHAR},
      </if>
      <if test="key2 != null" >
        #{key2,jdbcType=VARCHAR},
      </if>
      <if test="key3 != null" >
        #{key3,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.etcp.pojo.TbOrderExample" resultType="java.lang.Integer" >
    select count(*) from tb_order
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update tb_order
    <set >
      <if test="record.orderId != null" >
        order_id = #{record.orderId,jdbcType=BIGINT},
      </if>
      <if test="record.createTime != null" >
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.inTime != null" >
        in_time = #{record.inTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.outTime != null" >
        out_time = #{record.outTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.closeTime != null" >
        close_time = #{record.closeTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.paymentTime != null" >
        payment_time = #{record.paymentTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.isovertime != null" >
        isOvertime = #{record.isovertime,jdbcType=INTEGER},
      </if>
      <if test="record.overtime != null" >
        overtime = #{record.overtime,jdbcType=INTEGER},
      </if>
      <if test="record.timelength != null" >
        timeLength = #{record.timelength,jdbcType=VARCHAR},
      </if>
      <if test="record.payment != null" >
        payment = #{record.payment,jdbcType=DECIMAL},
      </if>
      <if test="record.paymentType != null" >
        payment_type = #{record.paymentType,jdbcType=INTEGER},
      </if>
      <if test="record.status != null" >
        status = #{record.status,jdbcType=INTEGER},
      </if>
      <if test="record.guarantee != null" >
        guarantee = #{record.guarantee,jdbcType=DECIMAL},
      </if>
      <if test="record.userId != null" >
        user_id = #{record.userId,jdbcType=BIGINT},
      </if>
      <if test="record.key1 != null" >
        key1 = #{record.key1,jdbcType=VARCHAR},
      </if>
      <if test="record.key2 != null" >
        key2 = #{record.key2,jdbcType=VARCHAR},
      </if>
      <if test="record.key3 != null" >
        key3 = #{record.key3,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update tb_order
    set order_id = #{record.orderId,jdbcType=BIGINT},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      in_time = #{record.inTime,jdbcType=TIMESTAMP},
      out_time = #{record.outTime,jdbcType=TIMESTAMP},
      close_time = #{record.closeTime,jdbcType=TIMESTAMP},
      payment_time = #{record.paymentTime,jdbcType=TIMESTAMP},
      isOvertime = #{record.isovertime,jdbcType=INTEGER},
      overtime = #{record.overtime,jdbcType=INTEGER},
      timeLength = #{record.timelength,jdbcType=VARCHAR},
      payment = #{record.payment,jdbcType=DECIMAL},
      payment_type = #{record.paymentType,jdbcType=INTEGER},
      status = #{record.status,jdbcType=INTEGER},
      guarantee = #{record.guarantee,jdbcType=DECIMAL},
      user_id = #{record.userId,jdbcType=BIGINT},
      key1 = #{record.key1,jdbcType=VARCHAR},
      key2 = #{record.key2,jdbcType=VARCHAR},
      key3 = #{record.key3,jdbcType=VARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.etcp.pojo.TbOrder" >
    update tb_order
    <set >
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="inTime != null" >
        in_time = #{inTime,jdbcType=TIMESTAMP},
      </if>
      <if test="outTime != null" >
        out_time = #{outTime,jdbcType=TIMESTAMP},
      </if>
      <if test="closeTime != null" >
        close_time = #{closeTime,jdbcType=TIMESTAMP},
      </if>
      <if test="paymentTime != null" >
        payment_time = #{paymentTime,jdbcType=TIMESTAMP},
      </if>
      <if test="isovertime != null" >
        isOvertime = #{isovertime,jdbcType=INTEGER},
      </if>
      <if test="overtime != null" >
        overtime = #{overtime,jdbcType=INTEGER},
      </if>
      <if test="timelength != null" >
        timeLength = #{timelength,jdbcType=VARCHAR},
      </if>
      <if test="payment != null" >
        payment = #{payment,jdbcType=DECIMAL},
      </if>
      <if test="paymentType != null" >
        payment_type = #{paymentType,jdbcType=INTEGER},
      </if>
      <if test="status != null" >
        status = #{status,jdbcType=INTEGER},
      </if>
      <if test="guarantee != null" >
        guarantee = #{guarantee,jdbcType=DECIMAL},
      </if>
      <if test="userId != null" >
        user_id = #{userId,jdbcType=BIGINT},
      </if>
      <if test="key1 != null" >
        key1 = #{key1,jdbcType=VARCHAR},
      </if>
      <if test="key2 != null" >
        key2 = #{key2,jdbcType=VARCHAR},
      </if>
      <if test="key3 != null" >
        key3 = #{key3,jdbcType=VARCHAR},
      </if>
    </set>
    where order_id = #{orderId,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.etcp.pojo.TbOrder" >
    update tb_order
    set create_time = #{createTime,jdbcType=TIMESTAMP},
      in_time = #{inTime,jdbcType=TIMESTAMP},
      out_time = #{outTime,jdbcType=TIMESTAMP},
      close_time = #{closeTime,jdbcType=TIMESTAMP},
      payment_time = #{paymentTime,jdbcType=TIMESTAMP},
      isOvertime = #{isovertime,jdbcType=INTEGER},
      overtime = #{overtime,jdbcType=INTEGER},
      timeLength = #{timelength,jdbcType=VARCHAR},
      payment = #{payment,jdbcType=DECIMAL},
      payment_type = #{paymentType,jdbcType=INTEGER},
      status = #{status,jdbcType=INTEGER},
      guarantee = #{guarantee,jdbcType=DECIMAL},
      user_id = #{userId,jdbcType=BIGINT},
      key1 = #{key1,jdbcType=VARCHAR},
      key2 = #{key2,jdbcType=VARCHAR},
      key3 = #{key3,jdbcType=VARCHAR}
    where order_id = #{orderId,jdbcType=BIGINT}
  </update>
</mapper>